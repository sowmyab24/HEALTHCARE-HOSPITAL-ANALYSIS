Here’s a snapshot of what I’ve explored:
 ✅ Filtering patient records based on birth year
 ✅ Extracting city and address data for non-local patients
 ✅ Practicing date functions, pattern matching, and basic joins
 ✅ Writing efficient, real-world queries that mimic industry needs

📌 Key Learnings:
🔍 How to filter and extract meaningful insights from patient data using WHERE, LIKE, and date functions
🧾 Writing clean, readable queries that solve real business scenarios
🧠 Thinking like an analyst: asking the right questions and building queries around them
📅 Using functions to work with dates and conditions effectively
🔄 The importance of practicing real datasets to bridge the gap between theory and application
💡 Each query helped me think about how analysts support hospital operations through insights and clean data.

LEVEL : MEDIUM

QUESTIONS 1-25

1.Show unique birth years from patients and order them by ascending.
select distinct year(birth_date) as birth_year
from patients
order by year(birth_date) asc

2.Show unique first names from the patients table which only occurs once in the list.
select first_name
from patients
group by first_name
having count(*)=1
order by first_name

3.Show patient_id and first_name from patients where their first_name start and ends with 's' and is at least 6 characters long.
select patient_id, first_name
from patients
where first_name like 'S%s'
and length(first_name)>=6


4.Show patient_id, first_name, last_name from patients whos diagnosis is 'Dementia'.
Primary diagnosis is stored in the admissions table. ( patients,admissions)
select p.patient_id, first_name, last_name
from patients p 
join admissions a 
on p.patient_id=a.patient_id
where diagnosis='Dementia'

5. Display every patient's first_name.Order the list by the length of each name and then by alphabetically.
select first_name
from patients
order by length (first_name),first_name

6.Show the total amount of male patients and the total amount of female patients in the patients table.
Display the two results in the same row.
select 
( select count(*) from patients where gender='M') as male_count,
 ( select count(*) from patients where gender='F') as female_count;


7.Show first and last name, allergies from patients which have allergies to either 'Penicillin' or 'Morphine'. Show results ordered ascending by allergies then by first_name then by last_name.
select first_name, last_name, allergies
from patients
where allergies ='Penicillin'  or allergies= 'Morphine'
order by allergies  asc , first_name asc, last_name asc

8.Show patient_id, diagnosis from admissions. Find patients admitted multiple times for the same diagnosis.
select patient_id, diagnosis
from admissions
group by patient_id, diagnosis
having count(diagnosis=diagnosis) >1


9.Show the city and the total number of patients in the city.Order from most to least patients and then by city name ascending.
select city, count(*) as num_patients
from patients
group by city
order by count(*) desc, city asc

10.Show first name, last name and role of every person that is either patient or doctor.
The roles are either "Patient" or "Doctor"
select first_name, last_name,'patient' as role   
from patients 
union all  
select first_name, last_name,'doctor' as role   
from doctors

11.Show all allergies ordered by popularity. Remove NULL values from query.
select allergies, count(*) as total_diagnosis
from patients
where allergies is not null
group by allergies
order by total_diagnosis desc

12.Show all patient's first_name, last_name, and birth_date who were born in the 1970s decade. Sort the list starting from the earliest birth_date.
select first_name, last_name, birth_date
from patients
where year(birth_date) like '197%'
order by birth_date asc

13.We want to display each patient's full name in a single column. Their last_name in all upper letters must appear first, then first_name in all lower case letters. Separate the last_name and first_name with a comma. Order the list by the first_name in decending order
EX: SMITH,jane
select concat(upper(last_name), ',' , lower(first_name)) as new_name
from patients
order by first_name desc

14.Show the province_id(s), sum of height; where the total sum of its patient's height is greater than or equal to 7,000.
SELECT province_id,sum(height)
FROM patients
group by province_id
having sum(height) >=7000

15.Show the difference between the largest weight and smallest weight for patients with the last name 'Maroni'
select max(weight)- min(weight) as weight_delta
from patients
where last_name ='Maroni'

16.Show all of the days of the month (1-31) and how many admission_dates occurred on that day. Sort by the day with most admissions to least admissions.
select day(admission_date) as day_number,
count(*) as no_of_admissions
from admissions
group by day(admission_date)
order by no_of_admissions desc

17.Show all columns for patient_id 542's most recent admission_date.
select patient_id, max(admission_date), max(discharge_date), diagnosis,
attending_doctor_id
from admissions
where patient_id ='542'

18.Show patient_id, attending_doctor_id, and diagnosis for admissions that match one of the two criteria:
1. patient_id is an odd number and attending_doctor_id is either 1, 5, or 19.
2. attending_doctor_id contains a 2 and the length of patient_id is 3 characters.
select patient_id, diagnosis,attending_doctor_id
from admissions
where patient_id %2 <>0
and attending_doctor_id in ('1','5','19')
or attending_doctor_id like ('%2%')
and length(patient_id)=3

19.Show first_name, last_name, and the total number of admissions attended for each doctor.
Every admission has been attended by a doctor.
select d.first_name, d.last_name, count(a.admission_date) as admission_total
from  doctors d
join  admissions a
on  d.doctor_id =a.attending_doctor_id
group by  d.first_name, d.last_name
order by  d.first_name, d.last_name

20.For each doctor, display their id, full name, and the first and last admission date they attended.
select  d.doctor_id, concat(d.first_name,' ',d.last_name) as full_name,
min(a.admission_date) as first_admission_date,
max(a.admission_date) as last_admission_date
from doctors d
join admissions a 
on a.attending_doctor_id =d.doctor_id
group by d.doctor_id, concat(d.first_name,' ',d.last_name)

21.Display the total amount of patients for each province. Order by descending.
select pn.province_name, count(*) as patient_count
from province_names pn
join patients p 
on p.province_id=pn.province_id
group by province_name
order by patient_count desc

22.display the first name, last name and number of duplicate patients based on their first name and last name.
Ex: A patient with an identical name can be considered a duplicate.
select first_name, last_name , count(*) as no_of_duplicates
from patients
group by first_name, last_name 
having count(*) >1

23.Display patient's full name,height in the units feet rounded to 1 decimal,weight in the unit pounds rounded to 0 decimals,birth_date,gender non abbreviated. Convert CM to feet by dividing by 30.48.
Convert KG to pounds by multiplying by 2.205.

select concat(first_name,' ', last_name) as patient_name , 
round(height /30.48,1 ) as height,
round(weight *2.205,0 ) as weight,
birth_date, 
case when gender= 'M' then 'male'
else 'female'
end as 'gender_type'
from patients

24.Show patient_id, first_name, last_name from patients whose does not have any records in the admissions table. (Their patient_id does not exist in any admissions.patient_id rows.)
select p.patient_id, p.first_name,p. last_name
from patients p
where p.patient_id not in (select patient_id from admissions)


25.Display a single row with max_visits, min_visits, average_visits where the maximum, minimum and average number of admissions per day is calculated. Average is rounded to 2 decimal places.
select 
	max(number_of_visits) as max_visits, 
	min(number_of_visits) as min_visits, 
  round(avg(number_of_visits),2) as average_visits 
from (
  select admission_date, count(*) as number_of_visits
  from admissions 
  group by admission_date
)


























































































































































